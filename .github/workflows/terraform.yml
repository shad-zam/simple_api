

name: 'Terraform'

on:
  push:
    branches:
    - "main"
  pull_request:

permissions:
  contents: read

jobs:
  terraform-plan:
    name: 'Terraform-plan'
    runs-on: ubuntu-latest
    environment: Test

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_CLOUD_API_TOKEN }}

  # Install the latest version of Ansible
    - name: Install Ansible
      run: sudo apt-get install ansible -y
    
    # List all the files
    - name: List files
      run: ls -la

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./Terraform

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ./Terraform

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ./Terraform

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
    #   run: terraform apply -auto-approve -input=false
    #   working-directory: ./Terraform

        # Generates an execution plan for Terraform

  terraform-apply:
    name: 'Terraform-apply'
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: manual approval
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      uses: trstringer/manual-approval@v1
      with:
        approvers: shad-zam

    - name: Terraform Apply
      run: echo "running terraform apply"
      # run: terraform apply -auto-approve -input=false
#       working-directory: ./Terraform


